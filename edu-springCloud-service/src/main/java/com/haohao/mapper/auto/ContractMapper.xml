<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.haohao.mapper.auto.ContractMapper" >
  <resultMap id="BaseResultMap" type="com.haohao.modelAndExample.Contract" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="source" property="source" jdbcType="VARCHAR" />
    <result column="contract_code" property="contractCode" jdbcType="VARCHAR" />
    <result column="quota_sum" property="quotaSum" jdbcType="DECIMAL" />
    <result column="balance" property="balance" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="enable" property="enable" jdbcType="TINYINT" />
    <result column="start_date" property="startDate" jdbcType="BIGINT" />
    <result column="invalid_date" property="invalidDate" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="BIGINT" />
    <result column="update_time" property="updateTime" jdbcType="BIGINT" />
    <result column="operator_id" property="operatorId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, source, contract_code, quota_sum, balance, status, enable, start_date, invalid_date, 
    create_time, update_time, operator_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.haohao.modelAndExample.ContractExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limit != null" >
      <if test="offset != null" >
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null" >
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from contract
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from contract
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.haohao.modelAndExample.ContractExample" >
    delete from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.haohao.modelAndExample.Contract" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into contract (source, contract_code, quota_sum, 
      balance, status, enable, 
      start_date, invalid_date, create_time, 
      update_time, operator_id)
    values (#{source,jdbcType=VARCHAR}, #{contractCode,jdbcType=VARCHAR}, #{quotaSum,jdbcType=DECIMAL}, 
      #{balance,jdbcType=DECIMAL}, #{status,jdbcType=TINYINT}, #{enable,jdbcType=TINYINT}, 
      #{startDate,jdbcType=BIGINT}, #{invalidDate,jdbcType=BIGINT}, #{createTime,jdbcType=BIGINT}, 
      #{updateTime,jdbcType=BIGINT}, #{operatorId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.haohao.modelAndExample.Contract" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into contract
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="source != null" >
        source,
      </if>
      <if test="contractCode != null" >
        contract_code,
      </if>
      <if test="quotaSum != null" >
        quota_sum,
      </if>
      <if test="balance != null" >
        balance,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="enable != null" >
        enable,
      </if>
      <if test="startDate != null" >
        start_date,
      </if>
      <if test="invalidDate != null" >
        invalid_date,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="operatorId != null" >
        operator_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="source != null" >
        #{source,jdbcType=VARCHAR},
      </if>
      <if test="contractCode != null" >
        #{contractCode,jdbcType=VARCHAR},
      </if>
      <if test="quotaSum != null" >
        #{quotaSum,jdbcType=DECIMAL},
      </if>
      <if test="balance != null" >
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="enable != null" >
        #{enable,jdbcType=TINYINT},
      </if>
      <if test="startDate != null" >
        #{startDate,jdbcType=BIGINT},
      </if>
      <if test="invalidDate != null" >
        #{invalidDate,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="operatorId != null" >
        #{operatorId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.haohao.modelAndExample.ContractExample" resultType="java.lang.Integer" >
    select count(*) from contract
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update contract
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.source != null" >
        source = #{record.source,jdbcType=VARCHAR},
      </if>
      <if test="record.contractCode != null" >
        contract_code = #{record.contractCode,jdbcType=VARCHAR},
      </if>
      <if test="record.quotaSum != null" >
        quota_sum = #{record.quotaSum,jdbcType=DECIMAL},
      </if>
      <if test="record.balance != null" >
        balance = #{record.balance,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.enable != null" >
        enable = #{record.enable,jdbcType=TINYINT},
      </if>
      <if test="record.startDate != null" >
        start_date = #{record.startDate,jdbcType=BIGINT},
      </if>
      <if test="record.invalidDate != null" >
        invalid_date = #{record.invalidDate,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=BIGINT},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=BIGINT},
      </if>
      <if test="record.operatorId != null" >
        operator_id = #{record.operatorId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update contract
    set id = #{record.id,jdbcType=INTEGER},
      source = #{record.source,jdbcType=VARCHAR},
      contract_code = #{record.contractCode,jdbcType=VARCHAR},
      quota_sum = #{record.quotaSum,jdbcType=DECIMAL},
      balance = #{record.balance,jdbcType=DECIMAL},
      status = #{record.status,jdbcType=TINYINT},
      enable = #{record.enable,jdbcType=TINYINT},
      start_date = #{record.startDate,jdbcType=BIGINT},
      invalid_date = #{record.invalidDate,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=BIGINT},
      update_time = #{record.updateTime,jdbcType=BIGINT},
      operator_id = #{record.operatorId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.haohao.modelAndExample.Contract" >
    update contract
    <set >
      <if test="source != null" >
        source = #{source,jdbcType=VARCHAR},
      </if>
      <if test="contractCode != null" >
        contract_code = #{contractCode,jdbcType=VARCHAR},
      </if>
      <if test="quotaSum != null" >
        quota_sum = #{quotaSum,jdbcType=DECIMAL},
      </if>
      <if test="balance != null" >
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="enable != null" >
        enable = #{enable,jdbcType=TINYINT},
      </if>
      <if test="startDate != null" >
        start_date = #{startDate,jdbcType=BIGINT},
      </if>
      <if test="invalidDate != null" >
        invalid_date = #{invalidDate,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="operatorId != null" >
        operator_id = #{operatorId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.haohao.modelAndExample.Contract" >
    update contract
    set source = #{source,jdbcType=VARCHAR},
      contract_code = #{contractCode,jdbcType=VARCHAR},
      quota_sum = #{quotaSum,jdbcType=DECIMAL},
      balance = #{balance,jdbcType=DECIMAL},
      status = #{status,jdbcType=TINYINT},
      enable = #{enable,jdbcType=TINYINT},
      start_date = #{startDate,jdbcType=BIGINT},
      invalid_date = #{invalidDate,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      operator_id = #{operatorId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--没有写limit语句，因为使用了PageInterceptor插件，该插件会自动生成limit语句-->
  <select id="selectByContractParam" parameterType="com.haohao.util.paramAndDto.ContractParam"
          resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"></include>,
    CASE WHEN `status` &gt;= 3 THEN 9
    ELSE `status`
    END AS sort_status
    FROM contract
    WHERE 1=1
    <if test="source!=null and source!=''">
      AND source = #{source}
    </if>
    <if test="status!=null and status!=''">
      AND status IN (${status})
    </if>
    <if test="createBetweenDate!=null">
      AND create_time BETWEEN '${createBetweenDate[0]}' AND '${createBetweenDate[1]}'
    </if>
    <if test="startBetweenDate!=null">
      AND start_date BETWEEN '${startBetweenDate[0]}' AND '${startBetweenDate[1]}'
    </if>
    <if test="invalidBetweenDate!=null">
      AND invalid_date BETWEEN '${invalidBetweenDate[0]}' AND '${invalidBetweenDate[1]}'
    </if>
    <if test="validSecond!=null">
      AND invalid_date - UNIX_TIMESTAMP() &lt; ${validSecond}
    </if>
    <choose>
      <when test="order!=null">
        ORDER BY ${order}
      </when>
      <otherwise>
        ORDER BY sort_status ASC, create_time DESC
      </otherwise>
    </choose>
  </select>
  <update id="subtractBalance" >
    update contract set balance = balance - #{subtract},update_time = UNIX_TIMESTAMP()
  	where contract_code = #{contractCode} and enable = 0 and start_date &lt; UNIX_TIMESTAMP() 
  	and invalid_date &gt;UNIX_TIMESTAMP() and balance &gt;= #{subtract}
  </update>

  <select id="countSumBalance" resultType="java.math.BigDecimal">
      SELECT SUM(balance)
      FROM contract
      WHERE 1=1
      AND invalid_date &gt;UNIX_TIMESTAMP()
  </select>
</mapper>